                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.2 #14356 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _uart_isr
                                     12 	.globl _main
                                     13 	.globl _display
                                     14 	.globl _Initial
                                     15 	.globl _Write7219
                                     16 	.globl _CY
                                     17 	.globl _AC
                                     18 	.globl _F0
                                     19 	.globl _RS1
                                     20 	.globl _RS0
                                     21 	.globl _OV
                                     22 	.globl _F1
                                     23 	.globl _P
                                     24 	.globl _PS
                                     25 	.globl _PT1
                                     26 	.globl _PX1
                                     27 	.globl _PT0
                                     28 	.globl _PX0
                                     29 	.globl _RD
                                     30 	.globl _WR
                                     31 	.globl _T1
                                     32 	.globl _T0
                                     33 	.globl _INT1
                                     34 	.globl _INT0
                                     35 	.globl _TXD
                                     36 	.globl _RXD
                                     37 	.globl _P3_7
                                     38 	.globl _P3_6
                                     39 	.globl _P3_5
                                     40 	.globl _P3_4
                                     41 	.globl _P3_3
                                     42 	.globl _P3_2
                                     43 	.globl _P3_1
                                     44 	.globl _P3_0
                                     45 	.globl _EA
                                     46 	.globl _ES
                                     47 	.globl _ET1
                                     48 	.globl _EX1
                                     49 	.globl _ET0
                                     50 	.globl _EX0
                                     51 	.globl _P2_7
                                     52 	.globl _P2_6
                                     53 	.globl _P2_5
                                     54 	.globl _P2_4
                                     55 	.globl _P2_3
                                     56 	.globl _P2_2
                                     57 	.globl _P2_1
                                     58 	.globl _P2_0
                                     59 	.globl _SM0
                                     60 	.globl _SM1
                                     61 	.globl _SM2
                                     62 	.globl _REN
                                     63 	.globl _TB8
                                     64 	.globl _RB8
                                     65 	.globl _TI
                                     66 	.globl _RI
                                     67 	.globl _P1_7
                                     68 	.globl _P1_6
                                     69 	.globl _P1_5
                                     70 	.globl _P1_4
                                     71 	.globl _P1_3
                                     72 	.globl _P1_2
                                     73 	.globl _P1_1
                                     74 	.globl _P1_0
                                     75 	.globl _TF1
                                     76 	.globl _TR1
                                     77 	.globl _TF0
                                     78 	.globl _TR0
                                     79 	.globl _IE1
                                     80 	.globl _IT1
                                     81 	.globl _IE0
                                     82 	.globl _IT0
                                     83 	.globl _P0_7
                                     84 	.globl _P0_6
                                     85 	.globl _P0_5
                                     86 	.globl _P0_4
                                     87 	.globl _P0_3
                                     88 	.globl _P0_2
                                     89 	.globl _P0_1
                                     90 	.globl _P0_0
                                     91 	.globl _B
                                     92 	.globl _ACC
                                     93 	.globl _PSW
                                     94 	.globl _IP
                                     95 	.globl _P3
                                     96 	.globl _IE
                                     97 	.globl _P2
                                     98 	.globl _SBUF
                                     99 	.globl _SCON
                                    100 	.globl _P1
                                    101 	.globl _TH1
                                    102 	.globl _TH0
                                    103 	.globl _TL1
                                    104 	.globl _TL0
                                    105 	.globl _TMOD
                                    106 	.globl _TCON
                                    107 	.globl _PCON
                                    108 	.globl _DPH
                                    109 	.globl _DPL
                                    110 	.globl _SP
                                    111 	.globl _P0
                                    112 	.globl _display_PARM_2
                                    113 	.globl _key
                                    114 	.globl _received_flag
                                    115 	.globl _send_flag
                                    116 	.globl _received_data
                                    117 	.globl _send_data
                                    118 ;--------------------------------------------------------
                                    119 ; special function registers
                                    120 ;--------------------------------------------------------
                                    121 	.area RSEG    (ABS,DATA)
      000000                        122 	.org 0x0000
                           000080   123 _P0	=	0x0080
                           000081   124 _SP	=	0x0081
                           000082   125 _DPL	=	0x0082
                           000083   126 _DPH	=	0x0083
                           000087   127 _PCON	=	0x0087
                           000088   128 _TCON	=	0x0088
                           000089   129 _TMOD	=	0x0089
                           00008A   130 _TL0	=	0x008a
                           00008B   131 _TL1	=	0x008b
                           00008C   132 _TH0	=	0x008c
                           00008D   133 _TH1	=	0x008d
                           000090   134 _P1	=	0x0090
                           000098   135 _SCON	=	0x0098
                           000099   136 _SBUF	=	0x0099
                           0000A0   137 _P2	=	0x00a0
                           0000A8   138 _IE	=	0x00a8
                           0000B0   139 _P3	=	0x00b0
                           0000B8   140 _IP	=	0x00b8
                           0000D0   141 _PSW	=	0x00d0
                           0000E0   142 _ACC	=	0x00e0
                           0000F0   143 _B	=	0x00f0
                                    144 ;--------------------------------------------------------
                                    145 ; special function bits
                                    146 ;--------------------------------------------------------
                                    147 	.area RSEG    (ABS,DATA)
      000000                        148 	.org 0x0000
                           000080   149 _P0_0	=	0x0080
                           000081   150 _P0_1	=	0x0081
                           000082   151 _P0_2	=	0x0082
                           000083   152 _P0_3	=	0x0083
                           000084   153 _P0_4	=	0x0084
                           000085   154 _P0_5	=	0x0085
                           000086   155 _P0_6	=	0x0086
                           000087   156 _P0_7	=	0x0087
                           000088   157 _IT0	=	0x0088
                           000089   158 _IE0	=	0x0089
                           00008A   159 _IT1	=	0x008a
                           00008B   160 _IE1	=	0x008b
                           00008C   161 _TR0	=	0x008c
                           00008D   162 _TF0	=	0x008d
                           00008E   163 _TR1	=	0x008e
                           00008F   164 _TF1	=	0x008f
                           000090   165 _P1_0	=	0x0090
                           000091   166 _P1_1	=	0x0091
                           000092   167 _P1_2	=	0x0092
                           000093   168 _P1_3	=	0x0093
                           000094   169 _P1_4	=	0x0094
                           000095   170 _P1_5	=	0x0095
                           000096   171 _P1_6	=	0x0096
                           000097   172 _P1_7	=	0x0097
                           000098   173 _RI	=	0x0098
                           000099   174 _TI	=	0x0099
                           00009A   175 _RB8	=	0x009a
                           00009B   176 _TB8	=	0x009b
                           00009C   177 _REN	=	0x009c
                           00009D   178 _SM2	=	0x009d
                           00009E   179 _SM1	=	0x009e
                           00009F   180 _SM0	=	0x009f
                           0000A0   181 _P2_0	=	0x00a0
                           0000A1   182 _P2_1	=	0x00a1
                           0000A2   183 _P2_2	=	0x00a2
                           0000A3   184 _P2_3	=	0x00a3
                           0000A4   185 _P2_4	=	0x00a4
                           0000A5   186 _P2_5	=	0x00a5
                           0000A6   187 _P2_6	=	0x00a6
                           0000A7   188 _P2_7	=	0x00a7
                           0000A8   189 _EX0	=	0x00a8
                           0000A9   190 _ET0	=	0x00a9
                           0000AA   191 _EX1	=	0x00aa
                           0000AB   192 _ET1	=	0x00ab
                           0000AC   193 _ES	=	0x00ac
                           0000AF   194 _EA	=	0x00af
                           0000B0   195 _P3_0	=	0x00b0
                           0000B1   196 _P3_1	=	0x00b1
                           0000B2   197 _P3_2	=	0x00b2
                           0000B3   198 _P3_3	=	0x00b3
                           0000B4   199 _P3_4	=	0x00b4
                           0000B5   200 _P3_5	=	0x00b5
                           0000B6   201 _P3_6	=	0x00b6
                           0000B7   202 _P3_7	=	0x00b7
                           0000B0   203 _RXD	=	0x00b0
                           0000B1   204 _TXD	=	0x00b1
                           0000B2   205 _INT0	=	0x00b2
                           0000B3   206 _INT1	=	0x00b3
                           0000B4   207 _T0	=	0x00b4
                           0000B5   208 _T1	=	0x00b5
                           0000B6   209 _WR	=	0x00b6
                           0000B7   210 _RD	=	0x00b7
                           0000B8   211 _PX0	=	0x00b8
                           0000B9   212 _PT0	=	0x00b9
                           0000BA   213 _PX1	=	0x00ba
                           0000BB   214 _PT1	=	0x00bb
                           0000BC   215 _PS	=	0x00bc
                           0000D0   216 _P	=	0x00d0
                           0000D1   217 _F1	=	0x00d1
                           0000D2   218 _OV	=	0x00d2
                           0000D3   219 _RS0	=	0x00d3
                           0000D4   220 _RS1	=	0x00d4
                           0000D5   221 _F0	=	0x00d5
                           0000D6   222 _AC	=	0x00d6
                           0000D7   223 _CY	=	0x00d7
                                    224 ;--------------------------------------------------------
                                    225 ; overlayable register banks
                                    226 ;--------------------------------------------------------
                                    227 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        228 	.ds 8
                                    229 ;--------------------------------------------------------
                                    230 ; internal ram data
                                    231 ;--------------------------------------------------------
                                    232 	.area DSEG    (DATA)
      000000                        233 _send_data::
      000000                        234 	.ds 1
      000001                        235 _received_data::
      000001                        236 	.ds 1
      000002                        237 _send_flag::
      000002                        238 	.ds 1
      000003                        239 _received_flag::
      000003                        240 	.ds 1
      000004                        241 _key::
      000004                        242 	.ds 7
      00000B                        243 _display_PARM_2:
      00000B                        244 	.ds 2
      00000D                        245 _main_cnt4_65537_18:
      00000D                        246 	.ds 1
      00000E                        247 _main_test_65537_18:
      00000E                        248 	.ds 2
      000010                        249 _main_flag_65537_18:
      000010                        250 	.ds 2
                                    251 ;--------------------------------------------------------
                                    252 ; overlayable items in internal ram
                                    253 ;--------------------------------------------------------
                                    254 ;--------------------------------------------------------
                                    255 ; Stack segment in internal ram
                                    256 ;--------------------------------------------------------
                                    257 	.area SSEG
      000000                        258 __start__stack:
      000000                        259 	.ds	1
                                    260 
                                    261 ;--------------------------------------------------------
                                    262 ; indirectly addressable internal ram data
                                    263 ;--------------------------------------------------------
                                    264 	.area ISEG    (DATA)
                                    265 ;--------------------------------------------------------
                                    266 ; absolute internal ram data
                                    267 ;--------------------------------------------------------
                                    268 	.area IABS    (ABS,DATA)
                                    269 	.area IABS    (ABS,DATA)
                                    270 ;--------------------------------------------------------
                                    271 ; bit data
                                    272 ;--------------------------------------------------------
                                    273 	.area BSEG    (BIT)
                                    274 ;--------------------------------------------------------
                                    275 ; paged external ram data
                                    276 ;--------------------------------------------------------
                                    277 	.area PSEG    (PAG,XDATA)
                                    278 ;--------------------------------------------------------
                                    279 ; uninitialized external ram data
                                    280 ;--------------------------------------------------------
                                    281 	.area XSEG    (XDATA)
                                    282 ;--------------------------------------------------------
                                    283 ; absolute external ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area XABS    (ABS,XDATA)
                                    286 ;--------------------------------------------------------
                                    287 ; initialized external ram data
                                    288 ;--------------------------------------------------------
                                    289 	.area XISEG   (XDATA)
                                    290 	.area HOME    (CODE)
                                    291 	.area GSINIT0 (CODE)
                                    292 	.area GSINIT1 (CODE)
                                    293 	.area GSINIT2 (CODE)
                                    294 	.area GSINIT3 (CODE)
                                    295 	.area GSINIT4 (CODE)
                                    296 	.area GSINIT5 (CODE)
                                    297 	.area GSINIT  (CODE)
                                    298 	.area GSFINAL (CODE)
                                    299 	.area CSEG    (CODE)
                                    300 ;--------------------------------------------------------
                                    301 ; interrupt vector
                                    302 ;--------------------------------------------------------
                                    303 	.area HOME    (CODE)
      000000                        304 __interrupt_vect:
      000000 02r00r00         [24]  305 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  306 	reti
      000004                        307 	.ds	7
      00000B 32               [24]  308 	reti
      00000C                        309 	.ds	7
      000013 32               [24]  310 	reti
      000014                        311 	.ds	7
      00001B 32               [24]  312 	reti
      00001C                        313 	.ds	7
      000023 02r01r77         [24]  314 	ljmp	_uart_isr
                                    315 ;--------------------------------------------------------
                                    316 ; global & static initialisations
                                    317 ;--------------------------------------------------------
                                    318 	.area HOME    (CODE)
                                    319 	.area GSINIT  (CODE)
                                    320 	.area GSFINAL (CODE)
                                    321 	.area GSINIT  (CODE)
                                    322 	.globl __sdcc_gsinit_startup
                                    323 	.globl __sdcc_program_startup
                                    324 	.globl __start__stack
                                    325 	.globl __mcs51_genXINIT
                                    326 	.globl __mcs51_genXRAMCLEAR
                                    327 	.globl __mcs51_genRAMCLEAR
                                    328 ;	./src/main.c:13: unsigned char send_flag=0;
      000000 75*02 00         [24]  329 	mov	_send_flag,#0x00
                                    330 ;	./src/main.c:14: unsigned char received_flag=0;
      000003 75*03 00         [24]  331 	mov	_received_flag,#0x00
                                    332 ;	./src/main.c:15: unsigned char key[]={ 1, 3, 1, 2, 2, 3, 4 };
      000006 75*04 01         [24]  333 	mov	_key,#0x01
      000009 75*05 03         [24]  334 	mov	(_key + 0x0001),#0x03
      00000C 75*06 01         [24]  335 	mov	(_key + 0x0002),#0x01
      00000F 75*07 02         [24]  336 	mov	(_key + 0x0003),#0x02
      000012 75*08 02         [24]  337 	mov	(_key + 0x0004),#0x02
      000015 75*09 03         [24]  338 	mov	(_key + 0x0005),#0x03
      000018 75*0A 04         [24]  339 	mov	(_key + 0x0006),#0x04
                                    340 	.area GSFINAL (CODE)
      000000 02r00r26         [24]  341 	ljmp	__sdcc_program_startup
                                    342 ;--------------------------------------------------------
                                    343 ; Home
                                    344 ;--------------------------------------------------------
                                    345 	.area HOME    (CODE)
                                    346 	.area HOME    (CODE)
      000026                        347 __sdcc_program_startup:
      000026 02r00r71         [24]  348 	ljmp	_main
                                    349 ;	return from main will return to caller
                                    350 ;--------------------------------------------------------
                                    351 ; code
                                    352 ;--------------------------------------------------------
                                    353 	.area CSEG    (CODE)
                                    354 ;------------------------------------------------------------
                                    355 ;Allocation info for local variables in function 'display'
                                    356 ;------------------------------------------------------------
                                    357 ;flag                      Allocated with name '_display_PARM_2'
                                    358 ;turn                      Allocated to registers r6 r7 
                                    359 ;i                         Allocated to registers r4 r5 
                                    360 ;------------------------------------------------------------
                                    361 ;	./src/main.c:17: void display(int turn, int flag){	
                                    362 ;	-----------------------------------------
                                    363 ;	 function display
                                    364 ;	-----------------------------------------
      000000                        365 _display:
                           000007   366 	ar7 = 0x07
                           000006   367 	ar6 = 0x06
                           000005   368 	ar5 = 0x05
                           000004   369 	ar4 = 0x04
                           000003   370 	ar3 = 0x03
                           000002   371 	ar2 = 0x02
                           000001   372 	ar1 = 0x01
                           000000   373 	ar0 = 0x00
      000000 AE 82            [24]  374 	mov	r6,dpl
      000002 AF 83            [24]  375 	mov	r7,dph
                                    376 ;	./src/main.c:18: if(flag==1){
      000004 74 01            [12]  377 	mov	a,#0x01
      000006 B5*0B 06         [24]  378 	cjne	a,_display_PARM_2,00129$
      000009 14               [12]  379 	dec	a
      00000A B5*0C 02         [24]  380 	cjne	a,(_display_PARM_2 + 1),00129$
      00000D 80 02            [24]  381 	sjmp	00130$
      00000F                        382 00129$:
      00000F 80 13            [24]  383 	sjmp	00102$
      000011                        384 00130$:
                                    385 ;	./src/main.c:19: Write7219(8,1);
      000011 75*00 01         [24]  386 	mov	_Write7219_PARM_2,#0x01
      000014 75 82 08         [24]  387 	mov	dpl,#0x08
      000017 C0 07            [24]  388 	push	ar7
      000019 C0 06            [24]  389 	push	ar6
      00001B 12r00r00         [24]  390 	lcall	_Write7219
      00001E D0 06            [24]  391 	pop	ar6
      000020 D0 07            [24]  392 	pop	ar7
      000022 80 11            [24]  393 	sjmp	00112$
      000024                        394 00102$:
                                    395 ;	./src/main.c:23: Write7219(8,0); // vice versa
      000024 75*00 00         [24]  396 	mov	_Write7219_PARM_2,#0x00
      000027 75 82 08         [24]  397 	mov	dpl,#0x08
      00002A C0 07            [24]  398 	push	ar7
      00002C C0 06            [24]  399 	push	ar6
      00002E 12r00r00         [24]  400 	lcall	_Write7219
      000031 D0 06            [24]  401 	pop	ar6
      000033 D0 07            [24]  402 	pop	ar7
                                    403 ;	./src/main.c:25: for(int i=0; i<turn; i++){
      000035                        404 00112$:
      000035 7C 00            [12]  405 	mov	r4,#0x00
      000037 7D 00            [12]  406 	mov	r5,#0x00
      000039                        407 00106$:
      000039 C3               [12]  408 	clr	c
      00003A EC               [12]  409 	mov	a,r4
      00003B 9E               [12]  410 	subb	a,r6
      00003C ED               [12]  411 	mov	a,r5
      00003D 64 80            [12]  412 	xrl	a,#0x80
      00003F 8F F0            [24]  413 	mov	b,r7
      000041 63 F0 80         [24]  414 	xrl	b,#0x80
      000044 95 F0            [12]  415 	subb	a,b
      000046 50 28            [24]  416 	jnc	00108$
                                    417 ;	./src/main.c:26: Write7219(7-i,key[i]); // print out the known key, use turn to control how long to print
      000048 8C 03            [24]  418 	mov	ar3,r4
      00004A 74 07            [12]  419 	mov	a,#0x07
      00004C C3               [12]  420 	clr	c
      00004D 9B               [12]  421 	subb	a,r3
      00004E F5 82            [12]  422 	mov	dpl,a
      000050 EC               [12]  423 	mov	a,r4
      000051 24r04            [12]  424 	add	a,#_key
      000053 F9               [12]  425 	mov	r1,a
      000054 87*00            [24]  426 	mov	_Write7219_PARM_2,@r1
      000056 C0 07            [24]  427 	push	ar7
      000058 C0 06            [24]  428 	push	ar6
      00005A C0 05            [24]  429 	push	ar5
      00005C C0 04            [24]  430 	push	ar4
      00005E 12r00r00         [24]  431 	lcall	_Write7219
      000061 D0 04            [24]  432 	pop	ar4
      000063 D0 05            [24]  433 	pop	ar5
      000065 D0 06            [24]  434 	pop	ar6
      000067 D0 07            [24]  435 	pop	ar7
                                    436 ;	./src/main.c:25: for(int i=0; i<turn; i++){
      000069 0C               [12]  437 	inc	r4
      00006A BC 00 CC         [24]  438 	cjne	r4,#0x00,00106$
      00006D 0D               [12]  439 	inc	r5
      00006E 80 C9            [24]  440 	sjmp	00106$
      000070                        441 00108$:
                                    442 ;	./src/main.c:28: }
      000070 22               [24]  443 	ret
                                    444 ;------------------------------------------------------------
                                    445 ;Allocation info for local variables in function 'main'
                                    446 ;------------------------------------------------------------
                                    447 ;i                         Allocated to registers r6 r7 
                                    448 ;turn                      Allocated to registers 
                                    449 ;cnt1                      Allocated to registers r7 
                                    450 ;cnt2                      Allocated to registers r6 
                                    451 ;cnt3                      Allocated to registers r5 
                                    452 ;cnt4                      Allocated with name '_main_cnt4_65537_18'
                                    453 ;test                      Allocated with name '_main_test_65537_18'
                                    454 ;flag                      Allocated with name '_main_flag_65537_18'
                                    455 ;------------------------------------------------------------
                                    456 ;	./src/main.c:30: void main(void)
                                    457 ;	-----------------------------------------
                                    458 ;	 function main
                                    459 ;	-----------------------------------------
      000071                        460 _main:
                                    461 ;	./src/main.c:33: TMOD = 0x20;			// set timer1 to mode2 
      000071 75 89 20         [24]  462 	mov	_TMOD,#0x20
                                    463 ;	./src/main.c:34: SCON = 0x50;       		// set serial mode1
      000074 75 98 50         [24]  464 	mov	_SCON,#0x50
                                    465 ;	./src/main.c:35: TH1 = 250;     			// baudrate = 9600, fosc = 11.0592MHz
      000077 75 8D FA         [24]  466 	mov	_TH1,#0xfa
                                    467 ;	./src/main.c:36: TR1 = 1;				// enable timer = 1
                                    468 ;	assignBit
      00007A D2 8E            [12]  469 	setb	_TR1
                                    470 ;	./src/main.c:37: IE = 0x90;				// enable serial port interrupt
      00007C 75 A8 90         [24]  471 	mov	_IE,#0x90
                                    472 ;	./src/main.c:39: Initial();
      00007F 12r00r00         [24]  473 	lcall	_Initial
                                    474 ;	./src/main.c:40: for (int i = 1; i < 9; i++)
      000082 7E 01            [12]  475 	mov	r6,#0x01
      000084 7F 00            [12]  476 	mov	r7,#0x00
      000086                        477 00143$:
      000086 C3               [12]  478 	clr	c
      000087 EE               [12]  479 	mov	a,r6
      000088 94 09            [12]  480 	subb	a,#0x09
      00008A EF               [12]  481 	mov	a,r7
      00008B 64 80            [12]  482 	xrl	a,#0x80
      00008D 94 80            [12]  483 	subb	a,#0x80
      00008F 50 17            [24]  484 	jnc	00101$
                                    485 ;	./src/main.c:41: Write7219(i, 0x0F);     	// Reset all digits as blank
      000091 8E 82            [24]  486 	mov	dpl,r6
      000093 75*00 0F         [24]  487 	mov	_Write7219_PARM_2,#0x0f
      000096 C0 07            [24]  488 	push	ar7
      000098 C0 06            [24]  489 	push	ar6
      00009A 12r00r00         [24]  490 	lcall	_Write7219
      00009D D0 06            [24]  491 	pop	ar6
      00009F D0 07            [24]  492 	pop	ar7
                                    493 ;	./src/main.c:40: for (int i = 1; i < 9; i++)
      0000A1 0E               [12]  494 	inc	r6
      0000A2 BE 00 E1         [24]  495 	cjne	r6,#0x00,00143$
      0000A5 0F               [12]  496 	inc	r7
      0000A6 80 DE            [24]  497 	sjmp	00143$
      0000A8                        498 00101$:
                                    499 ;	./src/main.c:45: unsigned char cnt1 = 0;
      0000A8 7F 00            [12]  500 	mov	r7,#0x00
                                    501 ;	./src/main.c:46: unsigned char cnt2 = 0;
      0000AA 7E 00            [12]  502 	mov	r6,#0x00
                                    503 ;	./src/main.c:47: unsigned char cnt3 = 0;
      0000AC 7D 00            [12]  504 	mov	r5,#0x00
                                    505 ;	./src/main.c:48: unsigned char cnt4 = 0;
      0000AE 8F*0D            [24]  506 	mov	_main_cnt4_65537_18,r7
                                    507 ;	./src/main.c:49: int test =0;
      0000B0 8F*0E            [24]  508 	mov	_main_test_65537_18,r7
                                    509 ;	./src/main.c:50: int flag =0;
      0000B2 E4               [12]  510 	clr	a
      0000B3 F5*10            [12]  511 	mov	_main_flag_65537_18,a
      0000B5 F5*11            [12]  512 	mov	(_main_flag_65537_18 + 1),a
                                    513 ;	./src/main.c:51: while(1){	
      0000B7 FA               [12]  514 	mov	r2,a
      0000B8 FB               [12]  515 	mov	r3,a
      0000B9                        516 00140$:
                                    517 ;	./src/main.c:52: if (but1 == 0) {
      0000B9 20 B2 11         [24]  518 	jb	_P3_2,00107$
                                    519 ;	./src/main.c:53: if (cnt1 < 3) {
      0000BC BF 03 00         [24]  520 	cjne	r7,#0x03,00265$
      0000BF                        521 00265$:
      0000BF 50 0E            [24]  522 	jnc	00108$
                                    523 ;	./src/main.c:54: cnt1++;
      0000C1 0F               [12]  524 	inc	r7
                                    525 ;	./src/main.c:55: if (cnt1 == 3) {
      0000C2 BF 03 0A         [24]  526 	cjne	r7,#0x03,00108$
                                    527 ;	./src/main.c:56: send_data = 1;
      0000C5 75*00 01         [24]  528 	mov	_send_data,#0x01
                                    529 ;	./src/main.c:57: send_flag = 1;
      0000C8 75*02 01         [24]  530 	mov	_send_flag,#0x01
      0000CB 80 02            [24]  531 	sjmp	00108$
      0000CD                        532 00107$:
                                    533 ;	./src/main.c:61: else { cnt1 = 0; }
      0000CD 7F 00            [12]  534 	mov	r7,#0x00
      0000CF                        535 00108$:
                                    536 ;	./src/main.c:63: if (but2 == 0) {
      0000CF 20 B3 11         [24]  537 	jb	_P3_3,00114$
                                    538 ;	./src/main.c:64: if (cnt2 < 3) {
      0000D2 BE 03 00         [24]  539 	cjne	r6,#0x03,00270$
      0000D5                        540 00270$:
      0000D5 50 0E            [24]  541 	jnc	00115$
                                    542 ;	./src/main.c:65: cnt2++;
      0000D7 0E               [12]  543 	inc	r6
                                    544 ;	./src/main.c:66: if (cnt2 == 3) {
      0000D8 BE 03 0A         [24]  545 	cjne	r6,#0x03,00115$
                                    546 ;	./src/main.c:67: send_data = 2;
      0000DB 75*00 02         [24]  547 	mov	_send_data,#0x02
                                    548 ;	./src/main.c:68: send_flag = 1;
      0000DE 75*02 01         [24]  549 	mov	_send_flag,#0x01
      0000E1 80 02            [24]  550 	sjmp	00115$
      0000E3                        551 00114$:
                                    552 ;	./src/main.c:72: else { cnt2 = 0; }
      0000E3 7E 00            [12]  553 	mov	r6,#0x00
      0000E5                        554 00115$:
                                    555 ;	./src/main.c:74: if (but3 == 0) {
      0000E5 20 A0 11         [24]  556 	jb	_P2_0,00121$
                                    557 ;	./src/main.c:75: if (cnt3 < 3) {
      0000E8 BD 03 00         [24]  558 	cjne	r5,#0x03,00275$
      0000EB                        559 00275$:
      0000EB 50 0E            [24]  560 	jnc	00122$
                                    561 ;	./src/main.c:76: cnt3++;
      0000ED 0D               [12]  562 	inc	r5
                                    563 ;	./src/main.c:77: if (cnt3 == 3) {
      0000EE BD 03 0A         [24]  564 	cjne	r5,#0x03,00122$
                                    565 ;	./src/main.c:78: send_data = 3;
      0000F1 75*00 03         [24]  566 	mov	_send_data,#0x03
                                    567 ;	./src/main.c:79: send_flag = 1;
      0000F4 75*02 01         [24]  568 	mov	_send_flag,#0x01
      0000F7 80 02            [24]  569 	sjmp	00122$
      0000F9                        570 00121$:
                                    571 ;	./src/main.c:83: else { cnt3 = 0; }
      0000F9 7D 00            [12]  572 	mov	r5,#0x00
      0000FB                        573 00122$:
                                    574 ;	./src/main.c:85: if (but4 == 0) {
      0000FB 20 A1 15         [24]  575 	jb	_P2_1,00128$
                                    576 ;	./src/main.c:86: if (cnt4 < 3) {
      0000FE 74 FD            [12]  577 	mov	a,#0x100 - 0x03
      000100 25*0D            [12]  578 	add	a,_main_cnt4_65537_18
      000102 40 12            [24]  579 	jc	00129$
                                    580 ;	./src/main.c:87: cnt4++;
      000104 05*0D            [12]  581 	inc	_main_cnt4_65537_18
                                    582 ;	./src/main.c:88: if (cnt4 == 3) {
      000106 74 03            [12]  583 	mov	a,#0x03
      000108 B5*0D 0B         [24]  584 	cjne	a,_main_cnt4_65537_18,00129$
                                    585 ;	./src/main.c:89: send_data = 4;
      00010B 75*00 04         [24]  586 	mov	_send_data,#0x04
                                    587 ;	./src/main.c:90: send_flag = 1;
      00010E 75*02 01         [24]  588 	mov	_send_flag,#0x01
      000111 80 03            [24]  589 	sjmp	00129$
      000113                        590 00128$:
                                    591 ;	./src/main.c:94: else { cnt4 = 0; }
      000113 75*0D 00         [24]  592 	mov	_main_cnt4_65537_18,#0x00
      000116                        593 00129$:
                                    594 ;	./src/main.c:97: if (send_flag==1)
      000116 74 01            [12]  595 	mov	a,#0x01
      000118 B5*02 06         [24]  596 	cjne	a,_send_flag,00131$
                                    597 ;	./src/main.c:99: SBUF = send_data;	// send data to SBUF
      00011B 85*00 99         [24]  598 	mov	_SBUF,_send_data
                                    599 ;	./src/main.c:100: send_flag = 0;
      00011E 75*02 00         [24]  600 	mov	_send_flag,#0x00
      000121                        601 00131$:
                                    602 ;	./src/main.c:104: if (received_flag == 1) {      
      000121 74 01            [12]  603 	mov	a,#0x01
      000123 B5*03 1D         [24]  604 	cjne	a,_received_flag,00136$
                                    605 ;	./src/main.c:105: test = received_data; //receiving data
      000126 AC*01            [24]  606 	mov	r4,_received_data
      000128 8C*0E            [24]  607 	mov	_main_test_65537_18,r4
                                    608 ;	./src/main.c:106: received_flag = 0;
      00012A 75*03 00         [24]  609 	mov	_received_flag,#0x00
                                    610 ;	./src/main.c:107: if(test==key[turn]) flag = 1;
      00012D EA               [12]  611 	mov	a,r2
      00012E 24r04            [12]  612 	add	a,#_key
      000130 F9               [12]  613 	mov	r1,a
      000131 E7               [12]  614 	mov	a,@r1
      000132 FC               [12]  615 	mov	r4,a
      000133 B5*0E 08         [24]  616 	cjne	a,_main_test_65537_18,00133$
      000136 75*10 01         [24]  617 	mov	_main_flag_65537_18,#0x01
      000139 75*11 00         [24]  618 	mov	(_main_flag_65537_18 + 1),#0x00
      00013C 80 05            [24]  619 	sjmp	00136$
      00013E                        620 00133$:
                                    621 ;	./src/main.c:108: else flag=0;
      00013E E4               [12]  622 	clr	a
      00013F F5*10            [12]  623 	mov	_main_flag_65537_18,a
      000141 F5*11            [12]  624 	mov	(_main_flag_65537_18 + 1),a
      000143                        625 00136$:
                                    626 ;	./src/main.c:110: if(test==key[turn]){ // if the received data is the same as the current key-> print
      000143 EA               [12]  627 	mov	a,r2
      000144 24r04            [12]  628 	add	a,#_key
      000146 F9               [12]  629 	mov	r1,a
      000147 E7               [12]  630 	mov	a,@r1
      000148 B5*0E 08         [24]  631 	cjne	a,_main_test_65537_18,00138$
                                    632 ;	./src/main.c:111: turn++;
      00014B 0A               [12]  633 	inc	r2
      00014C BA 00 01         [24]  634 	cjne	r2,#0x00,00291$
      00014F 0B               [12]  635 	inc	r3
      000150                        636 00291$:
                                    637 ;	./src/main.c:112: test=0;
      000150 75*0E 00         [24]  638 	mov	_main_test_65537_18,#0x00
      000153                        639 00138$:
                                    640 ;	./src/main.c:114: display(turn,flag);
      000153 85*10*0B         [24]  641 	mov	_display_PARM_2,_main_flag_65537_18
      000156 85*11*0C         [24]  642 	mov	(_display_PARM_2 + 1),(_main_flag_65537_18 + 1)
      000159 8A 82            [24]  643 	mov	dpl,r2
      00015B 8B 83            [24]  644 	mov	dph,r3
      00015D C0 07            [24]  645 	push	ar7
      00015F C0 06            [24]  646 	push	ar6
      000161 C0 05            [24]  647 	push	ar5
      000163 C0 03            [24]  648 	push	ar3
      000165 C0 02            [24]  649 	push	ar2
      000167 12r00r00         [24]  650 	lcall	_display
      00016A D0 02            [24]  651 	pop	ar2
      00016C D0 03            [24]  652 	pop	ar3
      00016E D0 05            [24]  653 	pop	ar5
      000170 D0 06            [24]  654 	pop	ar6
      000172 D0 07            [24]  655 	pop	ar7
                                    656 ;	./src/main.c:116: }
      000174 02r00rB9         [24]  657 	ljmp	00140$
                                    658 ;------------------------------------------------------------
                                    659 ;Allocation info for local variables in function 'uart_isr'
                                    660 ;------------------------------------------------------------
                                    661 ;	./src/main.c:119: void uart_isr(void) __interrupt (4)
                                    662 ;	-----------------------------------------
                                    663 ;	 function uart_isr
                                    664 ;	-----------------------------------------
      000177                        665 _uart_isr:
                                    666 ;	./src/main.c:121: if(RI==1){
                                    667 ;	./src/main.c:122: RI=0;
                                    668 ;	assignBit
      000177 10 98 02         [24]  669 	jbc	_RI,00119$
      00017A 80 06            [24]  670 	sjmp	00102$
      00017C                        671 00119$:
                                    672 ;	./src/main.c:123: received_data = SBUF;
      00017C 85 99*01         [24]  673 	mov	_received_data,_SBUF
                                    674 ;	./src/main.c:124: received_flag = 1;
      00017F 75*03 01         [24]  675 	mov	_received_flag,#0x01
      000182                        676 00102$:
                                    677 ;	./src/main.c:126: if(TI==1){
                                    678 ;	./src/main.c:127: TI=0;
                                    679 ;	assignBit
      000182 10 99 02         [24]  680 	jbc	_TI,00120$
      000185 80 00            [24]  681 	sjmp	00105$
      000187                        682 00120$:
      000187                        683 00105$:
                                    684 ;	./src/main.c:129: }
      000187 32               [24]  685 	reti
                                    686 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    687 ;	eliminated unneeded push/pop not_psw
                                    688 ;	eliminated unneeded push/pop dpl
                                    689 ;	eliminated unneeded push/pop dph
                                    690 ;	eliminated unneeded push/pop b
                                    691 ;	eliminated unneeded push/pop acc
                                    692 	.area CSEG    (CODE)
                                    693 	.area CONST   (CODE)
                                    694 	.area XINIT   (CODE)
                                    695 	.area CABS    (ABS,CODE)
